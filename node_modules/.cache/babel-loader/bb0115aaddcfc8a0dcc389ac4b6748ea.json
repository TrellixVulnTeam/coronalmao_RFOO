{"ast":null,"code":"import _regeneratorRuntime from\"/Users/lamhungpok/Projects/coding-projects/COVID19-Tracker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _toConsumableArray from\"/Users/lamhungpok/Projects/coding-projects/COVID19-Tracker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _asyncToGenerator from\"/Users/lamhungpok/Projects/coding-projects/COVID19-Tracker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{GET_ALL_COUNTRIES,GET_WWStats,SET_ALL_COUNTRIES_LOADING,ERROR}from\"./Types\";var baseUrl;process.env.NODE_ENV?baseUrl=process.env.REACT_APP_BASE_URL:baseUrl=process.env.BASE_URL;export var getAllCountries=function getAllCountries(){return/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch){var res,data,dataFiltered,sortedCountriesByCases;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:setLoading();_context.prev=1;_context.next=4;return fetch(\"https://corona.lmao.ninja/v2/countries\");case 4:res=_context.sent;if(res.ok){_context.next=8;break;}dispatch({type:ERROR,payload:\"HTTP Status: \".concat(res.status)});throw new Error(\"HTTP Status: \".concat(res.status));case 8:_context.next=10;return res.json();case 10:data=_context.sent;dataFiltered=data.filter(function(data){return data.country!==\"Western Sahara\";});sortedCountriesByCases=_toConsumableArray(dataFiltered).sort(function(a,b){return b.cases-a.cases;});dispatch({type:GET_ALL_COUNTRIES,payload:{allCountries:dataFiltered,sortedCountriesByCases:sortedCountriesByCases}});_context.next=19;break;case 16:_context.prev=16;_context.t0=_context[\"catch\"](1);dispatch({type:ERROR,payload:_context.t0.message});case 19:case\"end\":return _context.stop();}}},_callee,null,[[1,16]]);}));return function(_x){return _ref.apply(this,arguments);};}();};export var WWStatsFetch=function WWStatsFetch(){return/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch){var res;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:setLoading();_context2.prev=1;_context2.next=4;return fetch(\"\".concat(baseUrl,\"v2/all\"));case 4:res=_context2.sent;_context2.t0=dispatch;_context2.t1=GET_WWStats;_context2.next=9;return res.json();case 9:_context2.t2=_context2.sent;_context2.t3={type:_context2.t1,payload:_context2.t2};(0,_context2.t0)(_context2.t3);_context2.next=17;break;case 14:_context2.prev=14;_context2.t4=_context2[\"catch\"](1);dispatch({type:ERROR,payload:_context2.t4.message});case 17:case\"end\":return _context2.stop();}}},_callee2,null,[[1,14]]);}));return function(_x2){return _ref2.apply(this,arguments);};}();};export var setLoading=function setLoading(){return{type:SET_ALL_COUNTRIES_LOADING};};","map":{"version":3,"sources":["/Users/lamhungpok/Projects/coding-projects/COVID19-Tracker/src/Actions/Countries.js"],"names":["GET_ALL_COUNTRIES","GET_WWStats","SET_ALL_COUNTRIES_LOADING","ERROR","baseUrl","process","env","NODE_ENV","REACT_APP_BASE_URL","BASE_URL","getAllCountries","dispatch","setLoading","fetch","res","ok","type","payload","status","Error","json","data","dataFiltered","filter","country","sortedCountriesByCases","sort","a","b","cases","allCountries","message","WWStatsFetch"],"mappings":"whBAAA,OACEA,iBADF,CAEEC,WAFF,CAGEC,yBAHF,CAIEC,KAJF,KAKO,SALP,CAOA,GAAIC,CAAAA,OAAJ,CACAC,OAAO,CAACC,GAAR,CAAYC,QAAZ,CACKH,OAAO,CAAGC,OAAO,CAACC,GAAR,CAAYE,kBAD3B,CAEKJ,OAAO,CAAGC,OAAO,CAACC,GAAR,CAAYG,QAF3B,CAIA,MAAO,IAAMC,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,kGAAM,iBAAOC,QAAP,mKACnCC,UAAU,GADyB,sCAGfC,CAAAA,KAAK,0CAHU,QAG3BC,GAH2B,kBAI5BA,GAAG,CAACC,EAJwB,yBAK/BJ,QAAQ,CAAC,CACPK,IAAI,CAAEb,KADC,CAEPc,OAAO,wBAAkBH,GAAG,CAACI,MAAtB,CAFA,CAAD,CAAR,CAL+B,KASzB,IAAIC,CAAAA,KAAJ,wBAA0BL,GAAG,CAACI,MAA9B,EATyB,+BAWdJ,CAAAA,GAAG,CAACM,IAAJ,EAXc,SAW3BC,IAX2B,eAY3BC,YAZ2B,CAYZD,IAAI,CAACE,MAAL,CACnB,SAACF,IAAD,QAAUA,CAAAA,IAAI,CAACG,OAAL,GAAiB,gBAA3B,EADmB,CAZY,CAe3BC,sBAf2B,CAeF,mBAAIH,YAAJ,EAAkBI,IAAlB,CAAuB,SAACC,CAAD,CAAIC,CAAJ,CAAU,CAC9D,MAAOA,CAAAA,CAAC,CAACC,KAAF,CAAUF,CAAC,CAACE,KAAnB,CACD,CAF8B,CAfE,CAkBjClB,QAAQ,CAAC,CACPK,IAAI,CAAEhB,iBADC,CAEPiB,OAAO,CAAE,CAAEa,YAAY,CAAER,YAAhB,CAA8BG,sBAAsB,CAAtBA,sBAA9B,CAFF,CAAD,CAAR,CAlBiC,iFAuBjCd,QAAQ,CAAC,CAAEK,IAAI,CAAEb,KAAR,CAAec,OAAO,CAAE,YAAIc,OAA5B,CAAD,CAAR,CAvBiC,qEAAN,gEAAxB,CA2BP,MAAO,IAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,mGAAM,kBAAOrB,QAAP,8HAChCC,UAAU,GADsB,wCAGZC,CAAAA,KAAK,WAAIT,OAAJ,WAHO,QAGxBU,GAHwB,6BAI9BH,QAJ8B,cAIbV,WAJa,wBAIea,CAAAA,GAAG,CAACM,IAAJ,EAJf,kDAInBJ,IAJmB,cAIAC,OAJA,mIAM9BN,QAAQ,CAAC,CAAEK,IAAI,CAAEb,KAAR,CAAec,OAAO,CAAE,aAAIc,OAA5B,CAAD,CAAR,CAN8B,uEAAN,kEAArB,CAUP,MAAO,IAAMnB,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,EAAM,CAC9B,MAAO,CAAEI,IAAI,CAAEd,yBAAR,CAAP,CACD,CAFM","sourcesContent":["import {\r\n  GET_ALL_COUNTRIES,\r\n  GET_WWStats,\r\n  SET_ALL_COUNTRIES_LOADING,\r\n  ERROR,\r\n} from \"./Types\";\r\n\r\nlet baseUrl;\r\nprocess.env.NODE_ENV\r\n  ? (baseUrl = process.env.REACT_APP_BASE_URL)\r\n  : (baseUrl = process.env.BASE_URL);\r\n\r\nexport const getAllCountries = () => async (dispatch) => {\r\n  setLoading();\r\n  try {\r\n    const res = await fetch(`https://corona.lmao.ninja/v2/countries`);\r\n    if (!res.ok) {\r\n      dispatch({\r\n        type: ERROR,\r\n        payload: `HTTP Status: ${res.status}`,\r\n      });\r\n      throw new Error(`HTTP Status: ${res.status}`);\r\n    }\r\n    const data = await res.json();\r\n    const dataFiltered = data.filter(\r\n      (data) => data.country !== \"Western Sahara\",\r\n    );\r\n    const sortedCountriesByCases = [...dataFiltered].sort((a, b) => {\r\n      return b.cases - a.cases;\r\n    });\r\n    dispatch({\r\n      type: GET_ALL_COUNTRIES,\r\n      payload: { allCountries: dataFiltered, sortedCountriesByCases },\r\n    });\r\n  } catch (err) {\r\n    dispatch({ type: ERROR, payload: err.message });\r\n  }\r\n};\r\n\r\nexport const WWStatsFetch = () => async (dispatch) => {\r\n  setLoading();\r\n  try {\r\n    const res = await fetch(`${baseUrl}v2/all`);\r\n    dispatch({ type: GET_WWStats, payload: await res.json() });\r\n  } catch (err) {\r\n    dispatch({ type: ERROR, payload: err.message });\r\n  }\r\n};\r\n\r\nexport const setLoading = () => {\r\n  return { type: SET_ALL_COUNTRIES_LOADING };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}