{"ast":null,"code":"var _jsxFileName = \"/Users/lamhungpok/Projects/coding-projects/COVID19-Tracker/src/Components/Charts/pieChartItem.jsx\";\nimport React from 'react';\nimport { Pie } from 'react-chartjs-2';\nimport PropTypes from 'prop-types';\n\nconst PieChartItem = ({\n  Cases,\n  Deaths,\n  Recovered\n}) => {\n  return /*#__PURE__*/React.createElement(Pie, {\n    data: {\n      datasets: [{\n        data: [Cases, Deaths, Recovered],\n        backgroundColor: ['#fca903', '#d14356', '#49d170']\n      }],\n      labels: ['Cases', 'Deaths', 'Recovered']\n    },\n    options: {\n      responsive: true,\n      maintainAspectRatio: false,\n      // title: {\n      //   display: true,\n      //   text: \"World's Stats\"\n      // },\n      legend: {\n        display: true,\n        position: 'bottom',\n        labels: {\n          usePointStyle: true,\n          fontColor: '#8a8a8a'\n        }\n      },\n      tooltips: {\n        enabled: true,\n        backgroundColor: '#ededed',\n        borderWidth: '2',\n        borderColor: '#8a8a8a',\n        titleFontColor: '#4a4a4a',\n        bodyFontColor: '#4a4a4a',\n        callbacks: {\n          label: function (tooltipItem, data) {\n            const dataset = data.datasets[tooltipItem.datasetIndex];\n            const total = dataset.data.reduce((previousValue, currentValue) => previousValue + currentValue);\n            return `${data.labels[tooltipItem.index]}: ${Math.floor(dataset.data[tooltipItem.index] / total * 100 + 0.5)}%`;\n          }\n        }\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 5\n    }\n  });\n};\n\nPieChartItem.propTypes = {\n  Cases: PropTypes.number,\n  Deaths: PropTypes.number,\n  Recovered: PropTypes.number\n};\nexport default PieChartItem;","map":{"version":3,"sources":["/Users/lamhungpok/Projects/coding-projects/COVID19-Tracker/src/Components/Charts/pieChartItem.jsx"],"names":["React","Pie","PropTypes","PieChartItem","Cases","Deaths","Recovered","datasets","data","backgroundColor","labels","responsive","maintainAspectRatio","legend","display","position","usePointStyle","fontColor","tooltips","enabled","borderWidth","borderColor","titleFontColor","bodyFontColor","callbacks","label","tooltipItem","dataset","datasetIndex","total","reduce","previousValue","currentValue","index","Math","floor","propTypes","number"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,QAAoB,iBAApB;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,MAAMC,YAAY,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA,MAAT;AAAiBC,EAAAA;AAAjB,CAAD,KAAkC;AACrD,sBACE,oBAAC,GAAD;AACE,IAAA,IAAI,EAAE;AACJC,MAAAA,QAAQ,EAAE,CACR;AACEC,QAAAA,IAAI,EAAE,CAACJ,KAAD,EAAQC,MAAR,EAAgBC,SAAhB,CADR;AAEEG,QAAAA,eAAe,EAAE,CAAC,SAAD,EAAY,SAAZ,EAAuB,SAAvB;AAFnB,OADQ,CADN;AAOJC,MAAAA,MAAM,EAAE,CAAC,OAAD,EAAU,QAAV,EAAoB,WAApB;AAPJ,KADR;AAUE,IAAA,OAAO,EAAE;AACPC,MAAAA,UAAU,EAAE,IADL;AAEPC,MAAAA,mBAAmB,EAAE,KAFd;AAGP;AACA;AACA;AACA;AACAC,MAAAA,MAAM,EAAE;AACNC,QAAAA,OAAO,EAAE,IADH;AAENC,QAAAA,QAAQ,EAAE,QAFJ;AAGNL,QAAAA,MAAM,EAAE;AACNM,UAAAA,aAAa,EAAE,IADT;AAENC,UAAAA,SAAS,EAAE;AAFL;AAHF,OAPD;AAePC,MAAAA,QAAQ,EAAE;AACRC,QAAAA,OAAO,EAAE,IADD;AAERV,QAAAA,eAAe,EAAE,SAFT;AAGRW,QAAAA,WAAW,EAAE,GAHL;AAIRC,QAAAA,WAAW,EAAE,SAJL;AAKRC,QAAAA,cAAc,EAAE,SALR;AAMRC,QAAAA,aAAa,EAAE,SANP;AAORC,QAAAA,SAAS,EAAE;AACTC,UAAAA,KAAK,EAAE,UAAUC,WAAV,EAAuBlB,IAAvB,EAA6B;AAClC,kBAAMmB,OAAO,GAAGnB,IAAI,CAACD,QAAL,CAAcmB,WAAW,CAACE,YAA1B,CAAhB;AACA,kBAAMC,KAAK,GAAGF,OAAO,CAACnB,IAAR,CAAasB,MAAb,CACZ,CAACC,aAAD,EAAgBC,YAAhB,KAAiCD,aAAa,GAAGC,YADrC,CAAd;AAGA,mBAAQ,GAAExB,IAAI,CAACE,MAAL,CAAYgB,WAAW,CAACO,KAAxB,CAA+B,KAAIC,IAAI,CAACC,KAAL,CAC1CR,OAAO,CAACnB,IAAR,CAAakB,WAAW,CAACO,KAAzB,IAAkCJ,KAAnC,GAA4C,GAA5C,GAAkD,GADP,CAE3C,GAFF;AAGD;AATQ;AAPH;AAfH,KAVX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAgDD,CAjDD;;AAmDA1B,YAAY,CAACiC,SAAb,GAAyB;AACvBhC,EAAAA,KAAK,EAAEF,SAAS,CAACmC,MADM;AAEvBhC,EAAAA,MAAM,EAAEH,SAAS,CAACmC,MAFK;AAGvB/B,EAAAA,SAAS,EAAEJ,SAAS,CAACmC;AAHE,CAAzB;AAMA,eAAelC,YAAf","sourcesContent":["import React from 'react';\r\nimport { Pie } from 'react-chartjs-2';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst PieChartItem = ({ Cases, Deaths, Recovered }) => {\r\n  return (\r\n    <Pie\r\n      data={{\r\n        datasets: [\r\n          {\r\n            data: [Cases, Deaths, Recovered],\r\n            backgroundColor: ['#fca903', '#d14356', '#49d170']\r\n          }\r\n        ],\r\n        labels: ['Cases', 'Deaths', 'Recovered']\r\n      }}\r\n      options={{\r\n        responsive: true,\r\n        maintainAspectRatio: false,\r\n        // title: {\r\n        //   display: true,\r\n        //   text: \"World's Stats\"\r\n        // },\r\n        legend: {\r\n          display: true,\r\n          position: 'bottom',\r\n          labels: {\r\n            usePointStyle: true,\r\n            fontColor: '#8a8a8a'\r\n          }\r\n        },\r\n        tooltips: {\r\n          enabled: true,\r\n          backgroundColor: '#ededed',\r\n          borderWidth: '2',\r\n          borderColor: '#8a8a8a',\r\n          titleFontColor: '#4a4a4a',\r\n          bodyFontColor: '#4a4a4a',\r\n          callbacks: {\r\n            label: function (tooltipItem, data) {\r\n              const dataset = data.datasets[tooltipItem.datasetIndex];\r\n              const total = dataset.data.reduce(\r\n                (previousValue, currentValue) => previousValue + currentValue\r\n              );\r\n              return `${data.labels[tooltipItem.index]}: ${Math.floor(\r\n                (dataset.data[tooltipItem.index] / total) * 100 + 0.5\r\n              )}%`;\r\n            }\r\n          }\r\n        }\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nPieChartItem.propTypes = {\r\n  Cases: PropTypes.number,\r\n  Deaths: PropTypes.number,\r\n  Recovered: PropTypes.number\r\n};\r\n\r\nexport default PieChartItem;\r\n"]},"metadata":{},"sourceType":"module"}