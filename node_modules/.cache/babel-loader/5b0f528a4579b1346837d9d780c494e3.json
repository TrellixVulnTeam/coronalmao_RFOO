{"ast":null,"code":"import _slicedToArray from\"/Users/lamhungpok/Projects/coding-projects/COVID19-Tracker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from'react';import{connect}from'react-redux';import{getAllCountries,WWStatsFetch}from'../../Actions/Countries';import{setCurrentCountry}from'../../Actions/CurrentCountry';import{getCurrentHistory,getWWHistory,clearCurrentHistory}from'../../Actions/DataHistory';import Container from'react-bootstrap/Container';import Row from'react-bootstrap/Row';import AsyncSelect from'react-select/async';import CountriesItem from'./CountriesItem';import PropTypes from'prop-types';import Spinner from'react-bootstrap/Spinner';import Col from'react-bootstrap/Col';var Countries=function Countries(_ref){var _ref$AllCountriesData=_ref.AllCountriesData,allCountriesData=_ref$AllCountriesData.allCountriesData,allCountriesloading=_ref$AllCountriesData.allCountriesloading,getAllCountries=_ref.getAllCountries,WWStatsFetch=_ref.WWStatsFetch,setCurrentCountry=_ref.setCurrentCountry,getCurrentHistory=_ref.getCurrentHistory,getWWHistory=_ref.getWWHistory,clearCurrentHistory=_ref.clearCurrentHistory;useEffect(function(){getAllCountries();WWStatsFetch();getWWHistory();},[getAllCountries,WWStatsFetch,getWWHistory]);var _useState=useState(''),_useState2=_slicedToArray(_useState,2),setInputValue=_useState2[1];var filterCountrie=function filterCountrie(inputValue){if(!allCountriesloading&&allCountriesData!==null)return allCountriesData.filter(function(c){return c.country.toLowerCase().includes(inputValue.toLowerCase());});};var loadOptions=function loadOptions(InputValue,callback){callback(filterCountrie(InputValue));};var handleInputChange=function handleInputChange(newValue){var inputValue=newValue.replace(/\\W/g,'');setInputValue({inputValue:inputValue});return inputValue;};var onChange=function onChange(e){if(e!==null){var updated=e.updated,country=e.country,_e$countryInfo=e.countryInfo,flag=_e$countryInfo.flag,lat=_e$countryInfo.lat,long=_e$countryInfo.long,cases=e.cases,todayCases=e.todayCases,deaths=e.deaths,todayDeaths=e.todayDeaths,recovered=e.recovered,active=e.active,critical=e.critical,tests=e.tests;// Set Current country\nsetCurrentCountry({updated:updated,country:country,flag:flag,lat:lat,long:long,cases:cases,todayCases:todayCases,deaths:deaths,todayDeaths:todayDeaths,recovered:recovered,active:active,critical:critical,tests:tests});getCurrentHistory(country);}else{setCurrentCountry(null);clearCurrentHistory();}};return/*#__PURE__*/React.createElement(Container,null,/*#__PURE__*/React.createElement(Row,null,/*#__PURE__*/React.createElement(Col,{xs:\"12\",sm:\"12\",md:\"12\",lg:\"12\",xl:\"12\"},/*#__PURE__*/React.createElement(\"div\",{className:\"countriesSection\"},/*#__PURE__*/React.createElement(\"div\",{className:\"countriesDopdown\"},allCountriesloading||allCountriesData===null?/*#__PURE__*/React.createElement(\"div\",{className:\"Spinner\"},/*#__PURE__*/React.createElement(Spinner,{animation:\"border\",role:\"status\",variant:\"success\"},/*#__PURE__*/React.createElement(\"span\",{className:\"sr-only\"},\"Loading...\"))):/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(AsyncSelect,{placeholder:\"Search or Select Country ...\",options:allCountriesData,getOptionLabel:function getOptionLabel(option){return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"img\",{src:option.countryInfo.flag,className:\"flag\",alt:option.country}),\"\".concat(option.country));},getOptionValue:function getOptionValue(option){return option;},cacheOptions:true,loadOptions:loadOptions,defaultOptions:true,onInputChange:handleInputChange,onChange:onChange,components:{Option:CountriesItem},className:\"searchBox\",autoFocus:true,isClearable:true// menuIsOpen={true}\n})))))));};Countries.prototype={allCountriesData:PropTypes.object,allCountriesloading:PropTypes.bool.isRequired,getAllCountries:PropTypes.func.isRequired,setCurrentCountry:PropTypes.func.isRequired,WWStatsFetch:PropTypes.func.isRequired,getCurrentHistory:PropTypes.func.isRequired,getWWHistory:PropTypes.func.isRequired,clearCurrentHistory:PropTypes.func.isRequired};var mapStateToProps=function mapStateToProps(state){return{AllCountriesData:state.AllCountries};};export default connect(mapStateToProps,{getAllCountries:getAllCountries,WWStatsFetch:WWStatsFetch,setCurrentCountry:setCurrentCountry,getCurrentHistory:getCurrentHistory,getWWHistory:getWWHistory,clearCurrentHistory:clearCurrentHistory})(Countries);","map":{"version":3,"sources":["/Users/lamhungpok/Projects/coding-projects/COVID19-Tracker/src/Components/TopSection/Countries.jsx"],"names":["React","useState","useEffect","connect","getAllCountries","WWStatsFetch","setCurrentCountry","getCurrentHistory","getWWHistory","clearCurrentHistory","Container","Row","AsyncSelect","CountriesItem","PropTypes","Spinner","Col","Countries","AllCountriesData","allCountriesData","allCountriesloading","setInputValue","filterCountrie","inputValue","filter","c","country","toLowerCase","includes","loadOptions","InputValue","callback","handleInputChange","newValue","replace","onChange","e","updated","countryInfo","flag","lat","long","cases","todayCases","deaths","todayDeaths","recovered","active","critical","tests","option","Option","prototype","object","bool","isRequired","func","mapStateToProps","state","AllCountries"],"mappings":"iLAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,SAA1B,KAA2C,OAA3C,CACA,OAASC,OAAT,KAAwB,aAAxB,CACA,OAASC,eAAT,CAA0BC,YAA1B,KAA8C,yBAA9C,CACA,OAASC,iBAAT,KAAkC,8BAAlC,CACA,OACEC,iBADF,CAEEC,YAFF,CAGEC,mBAHF,KAIO,2BAJP,CAKA,MAAOC,CAAAA,SAAP,KAAsB,2BAAtB,CACA,MAAOC,CAAAA,GAAP,KAAgB,qBAAhB,CACA,MAAOC,CAAAA,WAAP,KAAwB,oBAAxB,CACA,MAAOC,CAAAA,aAAP,KAA0B,iBAA1B,CACA,MAAOC,CAAAA,SAAP,KAAsB,YAAtB,CACA,MAAOC,CAAAA,OAAP,KAAoB,yBAApB,CACA,MAAOC,CAAAA,GAAP,KAAgB,qBAAhB,CAEA,GAAMC,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,MAQZ,gCAPJC,gBAOI,CAPgBC,gBAOhB,uBAPgBA,gBAOhB,CAPkCC,mBAOlC,uBAPkCA,mBAOlC,CANJhB,eAMI,MANJA,eAMI,CALJC,YAKI,MALJA,YAKI,CAJJC,iBAII,MAJJA,iBAII,CAHJC,iBAGI,MAHJA,iBAGI,CAFJC,YAEI,MAFJA,YAEI,CADJC,mBACI,MADJA,mBACI,CACJP,SAAS,CAAC,UAAM,CACdE,eAAe,GACfC,YAAY,GACZG,YAAY,GACb,CAJQ,CAIN,CAACJ,eAAD,CAAkBC,YAAlB,CAAgCG,YAAhC,CAJM,CAAT,CADI,cAOsBP,QAAQ,CAAC,EAAD,CAP9B,wCAOKoB,aAPL,eASJ,GAAMC,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,CAAAC,UAAU,CAAI,CACnC,GAAI,CAACH,mBAAD,EAAwBD,gBAAgB,GAAK,IAAjD,CACE,MAAOA,CAAAA,gBAAgB,CAACK,MAAjB,CAAwB,SAAAC,CAAC,QAC9BA,CAAAA,CAAC,CAACC,OAAF,CAAUC,WAAV,GAAwBC,QAAxB,CAAiCL,UAAU,CAACI,WAAX,EAAjC,CAD8B,EAAzB,CAAP,CAGH,CALD,CAOA,GAAME,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACC,UAAD,CAAaC,QAAb,CAA0B,CAC5CA,QAAQ,CAACT,cAAc,CAACQ,UAAD,CAAf,CAAR,CACD,CAFD,CAIA,GAAME,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,CAAAC,QAAQ,CAAI,CACpC,GAAMV,CAAAA,UAAU,CAAGU,QAAQ,CAACC,OAAT,CAAiB,KAAjB,CAAwB,EAAxB,CAAnB,CACAb,aAAa,CAAC,CAAEE,UAAU,CAAVA,UAAF,CAAD,CAAb,CACA,MAAOA,CAAAA,UAAP,CACD,CAJD,CAMA,GAAMY,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAAAC,CAAC,CAAI,CACpB,GAAIA,CAAC,GAAK,IAAV,CAAgB,IAEZC,CAAAA,OAFY,CAaVD,CAbU,CAEZC,OAFY,CAGZX,OAHY,CAaVU,CAbU,CAGZV,OAHY,gBAaVU,CAbU,CAIZE,WAJY,CAIGC,IAJH,gBAIGA,IAJH,CAISC,GAJT,gBAISA,GAJT,CAIcC,IAJd,gBAIcA,IAJd,CAKZC,KALY,CAaVN,CAbU,CAKZM,KALY,CAMZC,UANY,CAaVP,CAbU,CAMZO,UANY,CAOZC,MAPY,CAaVR,CAbU,CAOZQ,MAPY,CAQZC,WARY,CAaVT,CAbU,CAQZS,WARY,CASZC,SATY,CAaVV,CAbU,CASZU,SATY,CAUZC,MAVY,CAaVX,CAbU,CAUZW,MAVY,CAWZC,QAXY,CAaVZ,CAbU,CAWZY,QAXY,CAYZC,KAZY,CAaVb,CAbU,CAYZa,KAZY,CAcd;AACA3C,iBAAiB,CAAC,CAChB+B,OAAO,CAAPA,OADgB,CAEhBX,OAAO,CAAPA,OAFgB,CAGhBa,IAAI,CAAJA,IAHgB,CAIhBC,GAAG,CAAHA,GAJgB,CAKhBC,IAAI,CAAJA,IALgB,CAMhBC,KAAK,CAALA,KANgB,CAOhBC,UAAU,CAAVA,UAPgB,CAQhBC,MAAM,CAANA,MARgB,CAShBC,WAAW,CAAXA,WATgB,CAUhBC,SAAS,CAATA,SAVgB,CAWhBC,MAAM,CAANA,MAXgB,CAYhBC,QAAQ,CAARA,QAZgB,CAahBC,KAAK,CAALA,KAbgB,CAAD,CAAjB,CAgBA1C,iBAAiB,CAACmB,OAAD,CAAjB,CACD,CAhCD,IAgCO,CACLpB,iBAAiB,CAAC,IAAD,CAAjB,CACAG,mBAAmB,GACpB,CACF,CArCD,CAuCA,mBACE,oBAAC,SAAD,mBACE,oBAAC,GAAD,mBACE,oBAAC,GAAD,EAAK,EAAE,CAAC,IAAR,CAAa,EAAE,CAAC,IAAhB,CAAqB,EAAE,CAAC,IAAxB,CAA6B,EAAE,CAAC,IAAhC,CAAqC,EAAE,CAAC,IAAxC,eACE,2BAAK,SAAS,CAAC,kBAAf,eACE,2BAAK,SAAS,CAAC,kBAAf,EACGW,mBAAmB,EAAID,gBAAgB,GAAK,IAA5C,cACC,2BAAK,SAAS,CAAC,SAAf,eACE,oBAAC,OAAD,EAAS,SAAS,CAAC,QAAnB,CAA4B,IAAI,CAAC,QAAjC,CAA0C,OAAO,CAAC,SAAlD,eACE,4BAAM,SAAS,CAAC,SAAhB,eADF,CADF,CADD,cAOC,4CACE,oBAAC,WAAD,EACE,WAAW,CAAC,8BADd,CAEE,OAAO,CAAEA,gBAFX,CAGE,cAAc,CAAE,wBAAA+B,MAAM,CAAI,CACxB,mBACE,4CACE,2BACE,GAAG,CAAEA,MAAM,CAACZ,WAAP,CAAmBC,IAD1B,CAEE,SAAS,CAAC,MAFZ,CAGE,GAAG,CAAEW,MAAM,CAACxB,OAHd,EADF,WAMMwB,MAAM,CAACxB,OANb,EADF,CAUD,CAdH,CAeE,cAAc,CAAE,wBAAAwB,MAAM,QAAIA,CAAAA,MAAJ,EAfxB,CAgBE,YAAY,KAhBd,CAiBE,WAAW,CAAErB,WAjBf,CAkBE,cAAc,KAlBhB,CAmBE,aAAa,CAAEG,iBAnBjB,CAoBE,QAAQ,CAAEG,QApBZ,CAqBE,UAAU,CAAE,CAAEgB,MAAM,CAAEtC,aAAV,CArBd,CAsBE,SAAS,CAAC,WAtBZ,CAuBE,SAAS,CAAE,IAvBb,CAwBE,WAAW,CAAE,IACb;AAzBF,EADF,CARJ,CADF,CADF,CADF,CADF,CADF,CAiDD,CA1HD,CA4HAI,SAAS,CAACmC,SAAV,CAAsB,CACpBjC,gBAAgB,CAAEL,SAAS,CAACuC,MADR,CAEpBjC,mBAAmB,CAAEN,SAAS,CAACwC,IAAV,CAAeC,UAFhB,CAGpBnD,eAAe,CAAEU,SAAS,CAAC0C,IAAV,CAAeD,UAHZ,CAIpBjD,iBAAiB,CAAEQ,SAAS,CAAC0C,IAAV,CAAeD,UAJd,CAKpBlD,YAAY,CAAES,SAAS,CAAC0C,IAAV,CAAeD,UALT,CAMpBhD,iBAAiB,CAAEO,SAAS,CAAC0C,IAAV,CAAeD,UANd,CAOpB/C,YAAY,CAAEM,SAAS,CAAC0C,IAAV,CAAeD,UAPT,CAQpB9C,mBAAmB,CAAEK,SAAS,CAAC0C,IAAV,CAAeD,UARhB,CAAtB,CAWA,GAAME,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAAAC,KAAK,QAAK,CAChCxC,gBAAgB,CAAEwC,KAAK,CAACC,YADQ,CAAL,EAA7B,CAIA,cAAexD,CAAAA,OAAO,CAACsD,eAAD,CAAkB,CACtCrD,eAAe,CAAfA,eADsC,CAEtCC,YAAY,CAAZA,YAFsC,CAGtCC,iBAAiB,CAAjBA,iBAHsC,CAItCC,iBAAiB,CAAjBA,iBAJsC,CAKtCC,YAAY,CAAZA,YALsC,CAMtCC,mBAAmB,CAAnBA,mBANsC,CAAlB,CAAP,CAOZQ,SAPY,CAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { getAllCountries, WWStatsFetch } from '../../Actions/Countries';\r\nimport { setCurrentCountry } from '../../Actions/CurrentCountry';\r\nimport {\r\n  getCurrentHistory,\r\n  getWWHistory,\r\n  clearCurrentHistory\r\n} from '../../Actions/DataHistory';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport AsyncSelect from 'react-select/async';\r\nimport CountriesItem from './CountriesItem';\r\nimport PropTypes from 'prop-types';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\nimport Col from 'react-bootstrap/Col';\r\n\r\nconst Countries = ({\r\n  AllCountriesData: { allCountriesData, allCountriesloading },\r\n  getAllCountries,\r\n  WWStatsFetch,\r\n  setCurrentCountry,\r\n  getCurrentHistory,\r\n  getWWHistory,\r\n  clearCurrentHistory\r\n}) => {\r\n  useEffect(() => {\r\n    getAllCountries();\r\n    WWStatsFetch();\r\n    getWWHistory();\r\n  }, [getAllCountries, WWStatsFetch, getWWHistory]);\r\n\r\n  const [, setInputValue] = useState('');\r\n\r\n  const filterCountrie = inputValue => {\r\n    if (!allCountriesloading && allCountriesData !== null)\r\n      return allCountriesData.filter(c =>\r\n        c.country.toLowerCase().includes(inputValue.toLowerCase())\r\n      );\r\n  };\r\n\r\n  const loadOptions = (InputValue, callback) => {\r\n    callback(filterCountrie(InputValue));\r\n  };\r\n\r\n  const handleInputChange = newValue => {\r\n    const inputValue = newValue.replace(/\\W/g, '');\r\n    setInputValue({ inputValue });\r\n    return inputValue;\r\n  };\r\n\r\n  const onChange = e => {\r\n    if (e !== null) {\r\n      const {\r\n        updated,\r\n        country,\r\n        countryInfo: { flag, lat, long },\r\n        cases,\r\n        todayCases,\r\n        deaths,\r\n        todayDeaths,\r\n        recovered,\r\n        active,\r\n        critical,\r\n        tests\r\n      } = e;\r\n      // Set Current country\r\n      setCurrentCountry({\r\n        updated,\r\n        country,\r\n        flag,\r\n        lat,\r\n        long,\r\n        cases,\r\n        todayCases,\r\n        deaths,\r\n        todayDeaths,\r\n        recovered,\r\n        active,\r\n        critical,\r\n        tests\r\n      });\r\n\r\n      getCurrentHistory(country);\r\n    } else {\r\n      setCurrentCountry(null);\r\n      clearCurrentHistory();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <Row>\r\n        <Col xs='12' sm='12' md='12' lg='12' xl='12'>\r\n          <div className='countriesSection'>\r\n            <div className='countriesDopdown'>\r\n              {allCountriesloading || allCountriesData === null ? (\r\n                <div className='Spinner'>\r\n                  <Spinner animation='border' role='status' variant='success'>\r\n                    <span className='sr-only'>Loading...</span>\r\n                  </Spinner>\r\n                </div>\r\n              ) : (\r\n                <div>\r\n                  <AsyncSelect\r\n                    placeholder='Search or Select Country ...'\r\n                    options={allCountriesData}\r\n                    getOptionLabel={option => {\r\n                      return (\r\n                        <div>\r\n                          <img\r\n                            src={option.countryInfo.flag}\r\n                            className='flag'\r\n                            alt={option.country}\r\n                          />\r\n                          {`${option.country}`}\r\n                        </div>\r\n                      );\r\n                    }}\r\n                    getOptionValue={option => option}\r\n                    cacheOptions\r\n                    loadOptions={loadOptions}\r\n                    defaultOptions\r\n                    onInputChange={handleInputChange}\r\n                    onChange={onChange}\r\n                    components={{ Option: CountriesItem }}\r\n                    className='searchBox'\r\n                    autoFocus={true}\r\n                    isClearable={true}\r\n                    // menuIsOpen={true}\r\n                  />\r\n                </div>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n};\r\n\r\nCountries.prototype = {\r\n  allCountriesData: PropTypes.object,\r\n  allCountriesloading: PropTypes.bool.isRequired,\r\n  getAllCountries: PropTypes.func.isRequired,\r\n  setCurrentCountry: PropTypes.func.isRequired,\r\n  WWStatsFetch: PropTypes.func.isRequired,\r\n  getCurrentHistory: PropTypes.func.isRequired,\r\n  getWWHistory: PropTypes.func.isRequired,\r\n  clearCurrentHistory: PropTypes.func.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  AllCountriesData: state.AllCountries\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n  getAllCountries,\r\n  WWStatsFetch,\r\n  setCurrentCountry,\r\n  getCurrentHistory,\r\n  getWWHistory,\r\n  clearCurrentHistory\r\n})(Countries);\r\n"]},"metadata":{},"sourceType":"module"}