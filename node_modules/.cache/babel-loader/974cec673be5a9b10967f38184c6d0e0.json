{"ast":null,"code":"import { GET_HiSTORY_CURRENT_COUNTRY, GET_WW_DATA_HISTORY, CLEAR_CURRENT_COUNTRY, SET_HiSTORY_CURRENT_COUNTRY_LOADING, SET_HiSTORY_CURRENT_COUNTRY_ERROR } from './Types';\nlet baseUrl;\nprocess.env.NODE_ENV ? baseUrl = process.env.REACT_APP_BASE_URL : baseUrl = process.env.BASE_URL;\nexport const getCurrentHistory = country => async dispatch => {\n  let Dates = [];\n  let Cases = [];\n  let Deaths = [];\n  let Recovered = [];\n  setLoading();\n\n  try {\n    const res = await fetch(`${baseUrl}v2/historical/${country}`);\n\n    if (!res.ok) {\n      dispatch({\n        type: SET_HiSTORY_CURRENT_COUNTRY_ERROR,\n        payload: `HTTP Status: ${res.status}`\n      });\n      throw new Error(`HTTP Status: ${res.status}`);\n    } else {\n      const Data = await res.json();\n\n      for (let [key, value] of Object.entries(Data.timeline.cases)) {\n        let newDate = key.split('/');\n        Dates.push(`${newDate[1]}/${newDate[0]}`);\n        Cases.push(value);\n      }\n\n      for (let [key, value] of Object.entries(Data.timeline.deaths)) {\n        Deaths.push(value);\n      }\n\n      for (let [key, value] of Object.entries(Data.timeline.recovered)) {\n        Recovered.push(value);\n      }\n\n      if (Dates.length > 0 && Cases.length > 0 && Deaths.length > 0 && Recovered.length > 0) {\n        dispatch({\n          type: GET_HiSTORY_CURRENT_COUNTRY,\n          payload: {\n            Data,\n            Dates,\n            Cases,\n            Deaths,\n            Recovered\n          }\n        });\n      }\n    }\n  } catch (err) {\n    dispatch({\n      type: SET_HiSTORY_CURRENT_COUNTRY_ERROR,\n      payload: err.message\n    });\n  }\n};\nexport const getWWHistory = () => async dispatch => {\n  let Dates = [];\n  let Cases = [];\n  let Deaths = [];\n  let Recovered = [];\n  setLoading();\n\n  try {\n    const res = await fetch(`${baseUrl}v2/historical/all`);\n\n    if (!res.ok) {\n      dispatch({\n        type: SET_HiSTORY_CURRENT_COUNTRY_ERROR,\n        payload: `HTTP Status: ${res.status}`\n      });\n      throw new Error(`HTTP Status: ${res.status}`);\n    } else {\n      const Data = await res.json();\n\n      for (let [key, value] of Object.entries(Data.cases)) {\n        let newDate = key.split('/');\n        Dates.push(`${newDate[1]}/${newDate[0]}`);\n        Cases.push(value);\n      }\n\n      for (let [key, value] of Object.entries(Data.deaths)) {\n        Deaths.push(value);\n      }\n\n      for (let [key, value] of Object.entries(Data.recovered)) {\n        Recovered.push(value);\n      }\n\n      if (Dates.length > 0 && Cases.length > 0 && Deaths.length > 0 && Recovered.length > 0) {\n        dispatch({\n          type: GET_WW_DATA_HISTORY,\n          payload: {\n            Data,\n            Dates,\n            Cases,\n            Deaths,\n            Recovered\n          }\n        });\n      }\n    }\n  } catch (err) {\n    dispatch({\n      type: SET_HiSTORY_CURRENT_COUNTRY_ERROR,\n      payload: err.message\n    });\n  }\n};\nexport const clearCurrentHistory = () => {\n  return {\n    type: CLEAR_CURRENT_COUNTRY\n  };\n};\nexport const setLoading = () => {\n  return {\n    type: SET_HiSTORY_CURRENT_COUNTRY_LOADING\n  };\n};","map":{"version":3,"sources":["/Users/lamhungpok/Projects/coding-projects/COVID19-Tracker/src/Actions/DataHistory.js"],"names":["GET_HiSTORY_CURRENT_COUNTRY","GET_WW_DATA_HISTORY","CLEAR_CURRENT_COUNTRY","SET_HiSTORY_CURRENT_COUNTRY_LOADING","SET_HiSTORY_CURRENT_COUNTRY_ERROR","baseUrl","process","env","NODE_ENV","REACT_APP_BASE_URL","BASE_URL","getCurrentHistory","country","dispatch","Dates","Cases","Deaths","Recovered","setLoading","res","fetch","ok","type","payload","status","Error","Data","json","key","value","Object","entries","timeline","cases","newDate","split","push","deaths","recovered","length","err","message","getWWHistory","clearCurrentHistory"],"mappings":"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","sourcesContent":["import {\r\n  GET_HiSTORY_CURRENT_COUNTRY,\r\n  GET_WW_DATA_HISTORY,\r\n  CLEAR_CURRENT_COUNTRY,\r\n  SET_HiSTORY_CURRENT_COUNTRY_LOADING,\r\n  SET_HiSTORY_CURRENT_COUNTRY_ERROR\r\n} from './Types';\r\n\r\nlet baseUrl;\r\nprocess.env.NODE_ENV\r\n  ? (baseUrl = process.env.REACT_APP_BASE_URL)\r\n  : (baseUrl = process.env.BASE_URL);\r\n\r\nexport const getCurrentHistory = country => async dispatch => {\r\n  let Dates = [];\r\n  let Cases = [];\r\n  let Deaths = [];\r\n  let Recovered = [];\r\n\r\n  setLoading();\r\n  try {\r\n    const res = await fetch(`${baseUrl}v2/historical/${country}`);\r\n    if (!res.ok) {\r\n      dispatch({\r\n        type: SET_HiSTORY_CURRENT_COUNTRY_ERROR,\r\n        payload: `HTTP Status: ${res.status}`\r\n      });\r\n      throw new Error(`HTTP Status: ${res.status}`);\r\n    } else {\r\n      const Data = await res.json();\r\n      for (let [key, value] of Object.entries(Data.timeline.cases)) {\r\n        let newDate = key.split('/');\r\n        Dates.push(`${newDate[1]}/${newDate[0]}`);\r\n        Cases.push(value);\r\n      }\r\n      for (let [key, value] of Object.entries(Data.timeline.deaths)) {\r\n        Deaths.push(value);\r\n      }\r\n      for (let [key, value] of Object.entries(Data.timeline.recovered)) {\r\n        Recovered.push(value);\r\n      }\r\n      if (\r\n        Dates.length > 0 &&\r\n        Cases.length > 0 &&\r\n        Deaths.length > 0 &&\r\n        Recovered.length > 0\r\n      ) {\r\n        dispatch({\r\n          type: GET_HiSTORY_CURRENT_COUNTRY,\r\n          payload: { Data, Dates, Cases, Deaths, Recovered }\r\n        });\r\n      }\r\n    }\r\n  } catch (err) {\r\n    dispatch({ type: SET_HiSTORY_CURRENT_COUNTRY_ERROR, payload: err.message });\r\n  }\r\n};\r\n\r\nexport const getWWHistory = () => async dispatch => {\r\n  let Dates = [];\r\n  let Cases = [];\r\n  let Deaths = [];\r\n  let Recovered = [];\r\n\r\n  setLoading();\r\n  try {\r\n    const res = await fetch(`${baseUrl}v2/historical/all`);\r\n    if (!res.ok) {\r\n      dispatch({\r\n        type: SET_HiSTORY_CURRENT_COUNTRY_ERROR,\r\n        payload: `HTTP Status: ${res.status}`\r\n      });\r\n      throw new Error(`HTTP Status: ${res.status}`);\r\n    } else {\r\n      const Data = await res.json();\r\n      for (let [key, value] of Object.entries(Data.cases)) {\r\n        let newDate = key.split('/');\r\n        Dates.push(`${newDate[1]}/${newDate[0]}`);\r\n        Cases.push(value);\r\n      }\r\n      for (let [key, value] of Object.entries(Data.deaths)) {\r\n        Deaths.push(value);\r\n      }\r\n      for (let [key, value] of Object.entries(Data.recovered)) {\r\n        Recovered.push(value);\r\n      }\r\n      if (\r\n        Dates.length > 0 &&\r\n        Cases.length > 0 &&\r\n        Deaths.length > 0 &&\r\n        Recovered.length > 0\r\n      ) {\r\n        dispatch({\r\n          type: GET_WW_DATA_HISTORY,\r\n          payload: { Data, Dates, Cases, Deaths, Recovered }\r\n        });\r\n      }\r\n    }\r\n  } catch (err) {\r\n    dispatch({ type: SET_HiSTORY_CURRENT_COUNTRY_ERROR, payload: err.message });\r\n  }\r\n};\r\n\r\nexport const clearCurrentHistory = () => {\r\n  return { type: CLEAR_CURRENT_COUNTRY };\r\n};\r\n\r\nexport const setLoading = () => {\r\n  return { type: SET_HiSTORY_CURRENT_COUNTRY_LOADING };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}