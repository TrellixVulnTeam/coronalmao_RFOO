{"ast":null,"code":"var _jsxFileName = \"/Users/lamhungpok/Projects/coding-projects/COVID19-Tracker/src/Components/Charts/LineChart.jsx\";\nimport React, { useEffect, useState } from 'react';\nimport LineChartItem from './LineChartItem';\nimport { connect } from 'react-redux';\nimport Spinner from 'react-bootstrap/Spinner';\nimport PropTypes from 'prop-types';\n\nconst LineChart = ({\n  DataHistory: {\n    Dates,\n    WWDates,\n    Cases,\n    WWCases,\n    Deaths,\n    WWDeaths,\n    Recovered,\n    WWRecovered,\n    currentCountryLoading\n  }\n}) => {\n  const [DataHistory, setDataHistory] = useState(null);\n  useEffect(() => {\n    WWDates && !Dates ? setDataHistory({\n      Dates: WWDates,\n      Cases: WWCases,\n      Deaths: WWDeaths,\n      Recovered: WWRecovered\n    }) : setDataHistory({\n      Dates,\n      Cases,\n      Deaths,\n      Recovered\n    }); // eslint-disable-next-line\n  }, [WWDates, Dates]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, !WWDates && !WWCases && !WWDeaths && !WWRecovered || currentCountryLoading ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"Spinner\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Spinner, {\n    animation: \"border\",\n    role: \"status\",\n    variant: \"success\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"sr-only\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }\n  }, \"Loading...\"))) : /*#__PURE__*/React.createElement(LineChartItem, {\n    Dates: DataHistory.Dates,\n    Cases: DataHistory.Cases,\n    Deaths: DataHistory.Deaths,\n    Recovered: DataHistory.Recovered,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  }));\n};\n\nLineChart.propTypes = {\n  WWDates: PropTypes.array,\n  Cases: PropTypes.array,\n  WWCases: PropTypes.array,\n  Deaths: PropTypes.array,\n  WWDeaths: PropTypes.array,\n  Recovered: PropTypes.array,\n  WWRecovered: PropTypes.array,\n  currentCountryLoading: PropTypes.bool\n};\n\nconst mapStateToProps = state => ({\n  DataHistory: state.DataHistory\n});\n\nexport default connect(mapStateToProps)(LineChart);","map":{"version":3,"sources":["/Users/lamhungpok/Projects/coding-projects/COVID19-Tracker/src/Components/Charts/LineChart.jsx"],"names":["React","useEffect","useState","LineChartItem","connect","Spinner","PropTypes","LineChart","DataHistory","Dates","WWDates","Cases","WWCases","Deaths","WWDeaths","Recovered","WWRecovered","currentCountryLoading","setDataHistory","propTypes","array","bool","mapStateToProps","state"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,OAAP,MAAoB,yBAApB;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,MAAMC,SAAS,GAAG,CAAC;AACjBC,EAAAA,WAAW,EAAE;AACXC,IAAAA,KADW;AAEXC,IAAAA,OAFW;AAGXC,IAAAA,KAHW;AAIXC,IAAAA,OAJW;AAKXC,IAAAA,MALW;AAMXC,IAAAA,QANW;AAOXC,IAAAA,SAPW;AAQXC,IAAAA,WARW;AASXC,IAAAA;AATW;AADI,CAAD,KAYZ;AACJ,QAAM,CAACT,WAAD,EAAcU,cAAd,IAAgChB,QAAQ,CAAC,IAAD,CAA9C;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACdS,IAAAA,OAAO,IAAI,CAACD,KAAZ,GACIS,cAAc,CAAC;AACbT,MAAAA,KAAK,EAAEC,OADM;AAEbC,MAAAA,KAAK,EAAEC,OAFM;AAGbC,MAAAA,MAAM,EAAEC,QAHK;AAIbC,MAAAA,SAAS,EAAEC;AAJE,KAAD,CADlB,GAOIE,cAAc,CAAC;AACbT,MAAAA,KADa;AAEbE,MAAAA,KAFa;AAGbE,MAAAA,MAHa;AAIbE,MAAAA;AAJa,KAAD,CAPlB,CADc,CAcd;AACD,GAfQ,EAeN,CAACL,OAAD,EAAUD,KAAV,CAfM,CAAT;AAiBA,sBACE,0CACI,CAACC,OAAD,IAAY,CAACE,OAAb,IAAwB,CAACE,QAAzB,IAAqC,CAACE,WAAvC,IACDC,qBADC,gBAEC;AAAK,IAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,OAAD;AAAS,IAAA,SAAS,EAAC,QAAnB;AAA4B,IAAA,IAAI,EAAC,QAAjC;AAA0C,IAAA,OAAO,EAAC,SAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAM,IAAA,SAAS,EAAC,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,CADF,CAFD,gBAQC,oBAAC,aAAD;AACE,IAAA,KAAK,EAAET,WAAW,CAACC,KADrB;AAEE,IAAA,KAAK,EAAED,WAAW,CAACG,KAFrB;AAGE,IAAA,MAAM,EAAEH,WAAW,CAACK,MAHtB;AAIE,IAAA,SAAS,EAAEL,WAAW,CAACO,SAJzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATJ,CADF;AAmBD,CAnDD;;AAqDAR,SAAS,CAACY,SAAV,GAAsB;AACpBT,EAAAA,OAAO,EAAEJ,SAAS,CAACc,KADC;AAEpBT,EAAAA,KAAK,EAAEL,SAAS,CAACc,KAFG;AAGpBR,EAAAA,OAAO,EAAEN,SAAS,CAACc,KAHC;AAIpBP,EAAAA,MAAM,EAAEP,SAAS,CAACc,KAJE;AAKpBN,EAAAA,QAAQ,EAAER,SAAS,CAACc,KALA;AAMpBL,EAAAA,SAAS,EAAET,SAAS,CAACc,KAND;AAOpBJ,EAAAA,WAAW,EAAEV,SAAS,CAACc,KAPH;AAQpBH,EAAAA,qBAAqB,EAAEX,SAAS,CAACe;AARb,CAAtB;;AAWA,MAAMC,eAAe,GAAGC,KAAK,KAAK;AAChCf,EAAAA,WAAW,EAAEe,KAAK,CAACf;AADa,CAAL,CAA7B;;AAIA,eAAeJ,OAAO,CAACkB,eAAD,CAAP,CAAyBf,SAAzB,CAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport LineChartItem from './LineChartItem';\r\nimport { connect } from 'react-redux';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst LineChart = ({\r\n  DataHistory: {\r\n    Dates,\r\n    WWDates,\r\n    Cases,\r\n    WWCases,\r\n    Deaths,\r\n    WWDeaths,\r\n    Recovered,\r\n    WWRecovered,\r\n    currentCountryLoading\r\n  }\r\n}) => {\r\n  const [DataHistory, setDataHistory] = useState(null);\r\n\r\n  useEffect(() => {\r\n    WWDates && !Dates\r\n      ? setDataHistory({\r\n          Dates: WWDates,\r\n          Cases: WWCases,\r\n          Deaths: WWDeaths,\r\n          Recovered: WWRecovered\r\n        })\r\n      : setDataHistory({\r\n          Dates,\r\n          Cases,\r\n          Deaths,\r\n          Recovered\r\n        });\r\n    // eslint-disable-next-line\r\n  }, [WWDates, Dates]);\r\n\r\n  return (\r\n    <>\r\n      {(!WWDates && !WWCases && !WWDeaths && !WWRecovered) ||\r\n      currentCountryLoading ? (\r\n        <div className='Spinner'>\r\n          <Spinner animation='border' role='status' variant='success'>\r\n            <span className='sr-only'>Loading...</span>\r\n          </Spinner>\r\n        </div>\r\n      ) : (\r\n        <LineChartItem\r\n          Dates={DataHistory.Dates}\r\n          Cases={DataHistory.Cases}\r\n          Deaths={DataHistory.Deaths}\r\n          Recovered={DataHistory.Recovered}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nLineChart.propTypes = {\r\n  WWDates: PropTypes.array,\r\n  Cases: PropTypes.array,\r\n  WWCases: PropTypes.array,\r\n  Deaths: PropTypes.array,\r\n  WWDeaths: PropTypes.array,\r\n  Recovered: PropTypes.array,\r\n  WWRecovered: PropTypes.array,\r\n  currentCountryLoading: PropTypes.bool\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  DataHistory: state.DataHistory\r\n});\r\n\r\nexport default connect(mapStateToProps)(LineChart);\r\n"]},"metadata":{},"sourceType":"module"}