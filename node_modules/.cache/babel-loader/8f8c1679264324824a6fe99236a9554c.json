{"ast":null,"code":"var _jsxFileName = \"/Users/lamhungpok/Projects/coding-projects/COVID19-Tracker/src/Components/Map/GlobalMap.jsx\";\nimport React, { useState, useEffect, Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport ReactMapGL, { FlyToInterpolator, Marker, Popup } from 'react-map-gl';\nimport Spinner from 'react-bootstrap/Spinner';\nimport PropTypes from 'prop-types';\nlet apiKey;\nprocess.env.NODE_ENV ? apiKey = process.env.REACT_APP_API_KEY : apiKey = process.env.API_KEY;\n\nconst GlobalMap = ({\n  CurrentCountryData: {\n    currentCountry,\n    currentCountryLoading\n  },\n  AllCountriesData: {\n    allCountriesData,\n    allCountriesloading\n  }\n}) => {\n  const [viewPort, setViewPort] = useState({\n    width: '100%',\n    height: '100%',\n    scrollZoom: false,\n    boxZoom: false,\n    doubleClickZoom: false\n  });\n  const [settings, setsettings] = useState({\n    dragPan: false,\n    touchAction: 'pan-y',\n    dragRotate: false,\n    scrollZoom: false,\n    touchZoom: false,\n    touchRotate: false,\n    keyboard: false,\n    doubleClickZoom: false\n  });\n  const [popupState, setPopupState] = useState({\n    state: false,\n    lat: 16,\n    long: 27\n  });\n  useEffect(() => {\n    if (currentCountry && !currentCountryLoading) {\n      setViewPort({ ...viewPort,\n        latitude: currentCountry.lat,\n        longitude: currentCountry.long,\n        zoom: 3.5,\n        transitionDuration: 3000,\n        transitionInterpolator: new FlyToInterpolator()\n      });\n      setPopupState({\n        state: true,\n        name: currentCountry.country,\n        flag: currentCountry.flag,\n        cases: currentCountry.cases,\n        deaths: currentCountry.deaths,\n        recovered: currentCountry.recovered,\n        lat: currentCountry.lat,\n        long: currentCountry.long\n      });\n    } else {\n      setViewPort({ ...viewPort,\n        latitude: 16,\n        longitude: 27,\n        zoom: 1.3,\n        transitionDuration: 3000,\n        transitionInterpolator: new FlyToInterpolator()\n      });\n      setPopupState({ ...popupState,\n        state: false\n      });\n    } // eslint-disable-next-line\n\n  }, [currentCountry, currentCountryLoading]);\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 5\n    }\n  }, allCountriesData === null || allCountriesloading ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"Spinner\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Spinner, {\n    animation: \"border\",\n    role: \"status\",\n    variant: \"success\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"sr-only\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }\n  }, \"Loading...\"))) : /*#__PURE__*/React.createElement(ReactMapGL, Object.assign({\n    className: \"map\"\n  }, viewPort, settings, {\n    mapboxApiAccessToken: apiKey,\n    mapStyle: \"mapbox://styles/mapbox/dark-v10\",\n    onViewportChange: viewPort => {\n      setViewPort(viewPort);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }\n  }), allCountriesData.map((country, id) => /*#__PURE__*/React.createElement(Marker, {\n    key: id,\n    latitude: country.countryInfo.lat,\n    longitude: country.countryInfo.long,\n    offsetTop: -15,\n    offsetLeft: -5,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }\n  }, currentCountry ? country.countryInfo.lat === currentCountry.lat && country.countryInfo.long === currentCountry.long ? /*#__PURE__*/React.createElement(\"i\", {\n    className: \"fas fa-circle selectedCircle\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 19\n    }\n  }) : /*#__PURE__*/React.createElement(\"i\", {\n    className: \"fas fa-circle circle\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 19\n    }\n  }) : /*#__PURE__*/React.createElement(\"i\", {\n    className: \"fas fa-circle circle\",\n    onClick: () => setPopupState({\n      state: true,\n      name: country.country,\n      flag: country.countryInfo.flag,\n      cases: country.cases,\n      deaths: country.deaths,\n      recovered: country.recovered,\n      lat: country.countryInfo.lat,\n      long: country.countryInfo.long\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 17\n    }\n  }))), popupState.state && /*#__PURE__*/React.createElement(Popup, {\n    latitude: popupState.lat,\n    longitude: popupState.long,\n    closeButton: false,\n    offsetTop: -15,\n    offsetLeft: 3,\n    className: \"popupup\",\n    onClose: () => {\n      if (!currentCountry) setPopupState({ ...popupState,\n        state: false\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"h6\", {\n    className: \"popupHeader\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: popupState.flag,\n    alt: \"flag\",\n    style: {\n      width: '60px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 19\n    }\n  }), popupState.name), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"popupCases\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 17\n    }\n  }, \"Cases:\", ` ${popupState.cases.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,')}`), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"popupDeaths\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 17\n    }\n  }, \"Deaths:\", ` ${popupState.deaths.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,')}`), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"popupRecovered\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 17\n    }\n  }, \"Recovered:\", ` ${popupState.recovered.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,')}`)))));\n};\n\nGlobalMap.prototype = {\n  currentCountry: PropTypes.object,\n  currentCountryLoading: PropTypes.bool,\n  allCountriesData: PropTypes.object,\n  allCountriesloading: PropTypes.bool\n};\n\nconst mapStateToProps = state => ({\n  CurrentCountryData: state.CurrentCountryData,\n  AllCountriesData: state.AllCountries\n});\n\nexport default connect(mapStateToProps)(GlobalMap);","map":{"version":3,"sources":["/Users/lamhungpok/Projects/coding-projects/COVID19-Tracker/src/Components/Map/GlobalMap.jsx"],"names":["React","useState","useEffect","Fragment","connect","ReactMapGL","FlyToInterpolator","Marker","Popup","Spinner","PropTypes","apiKey","process","env","NODE_ENV","REACT_APP_API_KEY","API_KEY","GlobalMap","CurrentCountryData","currentCountry","currentCountryLoading","AllCountriesData","allCountriesData","allCountriesloading","viewPort","setViewPort","width","height","scrollZoom","boxZoom","doubleClickZoom","settings","setsettings","dragPan","touchAction","dragRotate","touchZoom","touchRotate","keyboard","popupState","setPopupState","state","lat","long","latitude","longitude","zoom","transitionDuration","transitionInterpolator","name","country","flag","cases","deaths","recovered","map","id","countryInfo","toString","replace","prototype","object","bool","mapStateToProps","AllCountries"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, Fragment } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport ReactMapGL, { FlyToInterpolator, Marker, Popup } from 'react-map-gl';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\nimport PropTypes from 'prop-types';\r\n\r\nlet apiKey;\r\nprocess.env.NODE_ENV\r\n  ? (apiKey = process.env.REACT_APP_API_KEY)\r\n  : (apiKey = process.env.API_KEY);\r\n\r\nconst GlobalMap = ({\r\n  CurrentCountryData: { currentCountry, currentCountryLoading },\r\n  AllCountriesData: { allCountriesData, allCountriesloading }\r\n}) => {\r\n  const [viewPort, setViewPort] = useState({\r\n    width: '100%',\r\n    height: '100%',\r\n    scrollZoom: false,\r\n    boxZoom: false,\r\n    doubleClickZoom: false\r\n  });\r\n\r\n  const [settings, setsettings] = useState({\r\n    dragPan: false,\r\n    touchAction: 'pan-y',\r\n    dragRotate: false,\r\n    scrollZoom: false,\r\n    touchZoom: false,\r\n    touchRotate: false,\r\n    keyboard: false,\r\n    doubleClickZoom: false\r\n  });\r\n\r\n  const [popupState, setPopupState] = useState({\r\n    state: false,\r\n    lat: 16,\r\n    long: 27\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (currentCountry && !currentCountryLoading) {\r\n      setViewPort({\r\n        ...viewPort,\r\n        latitude: currentCountry.lat,\r\n        longitude: currentCountry.long,\r\n        zoom: 3.5,\r\n        transitionDuration: 3000,\r\n        transitionInterpolator: new FlyToInterpolator()\r\n      });\r\n      setPopupState({\r\n        state: true,\r\n        name: currentCountry.country,\r\n        flag: currentCountry.flag,\r\n        cases: currentCountry.cases,\r\n        deaths: currentCountry.deaths,\r\n        recovered: currentCountry.recovered,\r\n        lat: currentCountry.lat,\r\n        long: currentCountry.long\r\n      });\r\n    } else {\r\n      setViewPort({\r\n        ...viewPort,\r\n        latitude: 16,\r\n        longitude: 27,\r\n        zoom: 1.3,\r\n        transitionDuration: 3000,\r\n        transitionInterpolator: new FlyToInterpolator()\r\n      });\r\n      setPopupState({ ...popupState, state: false });\r\n    }\r\n    // eslint-disable-next-line\r\n  }, [currentCountry, currentCountryLoading]);\r\n\r\n  return (\r\n    <Fragment>\r\n      {allCountriesData === null || allCountriesloading ? (\r\n        <div className='Spinner'>\r\n          <Spinner animation='border' role='status' variant='success'>\r\n            <span className='sr-only'>Loading...</span>\r\n          </Spinner>\r\n        </div>\r\n      ) : (\r\n        <ReactMapGL\r\n          className='map'\r\n          {...viewPort}\r\n          {...settings}\r\n          mapboxApiAccessToken={apiKey}\r\n          mapStyle='mapbox://styles/mapbox/dark-v10'\r\n          onViewportChange={viewPort => {\r\n            setViewPort(viewPort);\r\n          }}>\r\n          {allCountriesData.map((country, id) => (\r\n            <Marker\r\n              key={id}\r\n              latitude={country.countryInfo.lat}\r\n              longitude={country.countryInfo.long}\r\n              offsetTop={-15}\r\n              offsetLeft={-5}>\r\n              {currentCountry ? (\r\n                country.countryInfo.lat === currentCountry.lat &&\r\n                country.countryInfo.long === currentCountry.long ? (\r\n                  <i className='fas fa-circle selectedCircle'></i>\r\n                ) : (\r\n                  <i className='fas fa-circle circle'></i>\r\n                )\r\n              ) : (\r\n                <i\r\n                  className='fas fa-circle circle'\r\n                  onClick={() =>\r\n                    setPopupState({\r\n                      state: true,\r\n                      name: country.country,\r\n                      flag: country.countryInfo.flag,\r\n                      cases: country.cases,\r\n                      deaths: country.deaths,\r\n                      recovered: country.recovered,\r\n                      lat: country.countryInfo.lat,\r\n                      long: country.countryInfo.long\r\n                    })\r\n                  }></i>\r\n              )}\r\n            </Marker>\r\n          ))}\r\n          {popupState.state && (\r\n            <Popup\r\n              latitude={popupState.lat}\r\n              longitude={popupState.long}\r\n              closeButton={false}\r\n              offsetTop={-15}\r\n              offsetLeft={3}\r\n              className='popupup'\r\n              onClose={() => {\r\n                if (!currentCountry)\r\n                  setPopupState({ ...popupState, state: false });\r\n              }}>\r\n              <div>\r\n                <h6 className='popupHeader'>\r\n                  <img\r\n                    src={popupState.flag}\r\n                    alt='flag'\r\n                    style={{ width: '60px' }}\r\n                  />\r\n                  {popupState.name}\r\n                </h6>\r\n                <p className='popupCases'>\r\n                  Cases:\r\n                  {` ${popupState.cases\r\n                    .toString()\r\n                    .replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,')}`}\r\n                </p>\r\n                <p className='popupDeaths'>\r\n                  Deaths:\r\n                  {` ${popupState.deaths\r\n                    .toString()\r\n                    .replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,')}`}\r\n                </p>\r\n                <p className='popupRecovered'>\r\n                  Recovered:\r\n                  {` ${popupState.recovered\r\n                    .toString()\r\n                    .replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,')}`}\r\n                </p>\r\n              </div>\r\n            </Popup>\r\n          )}\r\n        </ReactMapGL>\r\n      )}\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nGlobalMap.prototype = {\r\n  currentCountry: PropTypes.object,\r\n  currentCountryLoading: PropTypes.bool,\r\n  allCountriesData: PropTypes.object,\r\n  allCountriesloading: PropTypes.bool\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  CurrentCountryData: state.CurrentCountryData,\r\n  AllCountriesData: state.AllCountries\r\n});\r\n\r\nexport default connect(mapStateToProps)(GlobalMap);\r\n"]},"metadata":{},"sourceType":"module"}