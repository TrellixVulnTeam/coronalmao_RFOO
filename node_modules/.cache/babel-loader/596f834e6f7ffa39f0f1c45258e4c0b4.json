{"ast":null,"code":"var _jsxFileName = \"/Users/lamhungpok/Projects/coding-projects/COVID19-Tracker/src/Components/Charts/BarChart.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport BarChartItem from './BarChartItem';\nimport { connect } from 'react-redux';\nimport Spinner from 'react-bootstrap/Spinner';\nimport PropTypes from 'prop-types';\n\nconst BarChart = ({\n  DataHistory: {\n    Dates,\n    Cases,\n    Deaths,\n    Recovered,\n    WWDates,\n    WWCases,\n    WWDeaths,\n    WWRecovered,\n    currentCountryLoading\n  }\n}) => {\n  const [getDateHistory, setDataHistory] = useState(null);\n  useEffect(() => {\n    WWDates && !Dates ? setDataHistory({\n      Dates: WWDates,\n      Cases: WWCases,\n      Deaths: WWDeaths,\n      Recovered: WWRecovered\n    }) : setDataHistory({\n      Dates,\n      Cases,\n      Deaths,\n      Recovered\n    }); // eslint-disable-next-line\n  }, [Dates, WWDates]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, !WWDates && !WWCases && !WWDeaths && !WWRecovered || currentCountryLoading ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"Spinner\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Spinner, {\n    animation: \"border\",\n    role: \"status\",\n    variant: \"success\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"sr-only\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }\n  }, \"Loading...\"))) : /*#__PURE__*/React.createElement(BarChartItem, {\n    Dates: getDateHistory.Dates,\n    Cases: getDateHistory.Cases,\n    Deaths: getDateHistory.Deaths,\n    Recovered: getDateHistory.Recovered,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  }));\n};\n\nconst mapStateToProps = state => ({\n  DataHistory: state.DataHistory\n});\n\nBarChart.propTypes = {\n  Dates: PropTypes.array,\n  Cases: PropTypes.array,\n  Deaths: PropTypes.array,\n  Recovered: PropTypes.array,\n  WWDates: PropTypes.array,\n  WWCases: PropTypes.array,\n  WWDeaths: PropTypes.array,\n  WWRecovered: PropTypes.array,\n  currentCountryLoading: PropTypes.bool\n};\nexport default connect(mapStateToProps)(BarChart);","map":{"version":3,"sources":["/Users/lamhungpok/Projects/coding-projects/COVID19-Tracker/src/Components/Charts/BarChart.jsx"],"names":["React","useState","useEffect","BarChartItem","connect","Spinner","PropTypes","BarChart","DataHistory","Dates","Cases","Deaths","Recovered","WWDates","WWCases","WWDeaths","WWRecovered","currentCountryLoading","getDateHistory","setDataHistory","mapStateToProps","state","propTypes","array","bool"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,OAAP,MAAoB,yBAApB;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AAChBC,EAAAA,WAAW,EAAE;AACXC,IAAAA,KADW;AAEXC,IAAAA,KAFW;AAGXC,IAAAA,MAHW;AAIXC,IAAAA,SAJW;AAKXC,IAAAA,OALW;AAMXC,IAAAA,OANW;AAOXC,IAAAA,QAPW;AAQXC,IAAAA,WARW;AASXC,IAAAA;AATW;AADG,CAAD,KAYX;AACJ,QAAM,CAACC,cAAD,EAAiBC,cAAjB,IAAmClB,QAAQ,CAAC,IAAD,CAAjD;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACdW,IAAAA,OAAO,IAAI,CAACJ,KAAZ,GACIU,cAAc,CAAC;AACbV,MAAAA,KAAK,EAAEI,OADM;AAEbH,MAAAA,KAAK,EAAEI,OAFM;AAGbH,MAAAA,MAAM,EAAEI,QAHK;AAIbH,MAAAA,SAAS,EAAEI;AAJE,KAAD,CADlB,GAOIG,cAAc,CAAC;AACbV,MAAAA,KADa;AAEbC,MAAAA,KAFa;AAGbC,MAAAA,MAHa;AAIbC,MAAAA;AAJa,KAAD,CAPlB,CADc,CAcV;AACL,GAfQ,EAeN,CAACH,KAAD,EAAQI,OAAR,CAfM,CAAT;AAiBA,sBACE,0CACI,CAACA,OAAD,IAAY,CAACC,OAAb,IAAwB,CAACC,QAAzB,IAAqC,CAACC,WAAvC,IACDC,qBADC,gBAEC;AAAK,IAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,OAAD;AAAS,IAAA,SAAS,EAAC,QAAnB;AAA4B,IAAA,IAAI,EAAC,QAAjC;AAA0C,IAAA,OAAO,EAAC,SAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAM,IAAA,SAAS,EAAC,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,CADF,CAFD,gBAQC,oBAAC,YAAD;AACE,IAAA,KAAK,EAAEC,cAAc,CAACT,KADxB;AAEE,IAAA,KAAK,EAAES,cAAc,CAACR,KAFxB;AAGE,IAAA,MAAM,EAAEQ,cAAc,CAACP,MAHzB;AAIE,IAAA,SAAS,EAAEO,cAAc,CAACN,SAJ5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATJ,CADF;AAmBD,CAnDD;;AAqDA,MAAMQ,eAAe,GAAGC,KAAK,KAAK;AAChCb,EAAAA,WAAW,EAAEa,KAAK,CAACb;AADa,CAAL,CAA7B;;AAIAD,QAAQ,CAACe,SAAT,GAAqB;AACnBb,EAAAA,KAAK,EAAEH,SAAS,CAACiB,KADE;AAEnBb,EAAAA,KAAK,EAAEJ,SAAS,CAACiB,KAFE;AAGnBZ,EAAAA,MAAM,EAAEL,SAAS,CAACiB,KAHC;AAInBX,EAAAA,SAAS,EAAEN,SAAS,CAACiB,KAJF;AAKnBV,EAAAA,OAAO,EAAEP,SAAS,CAACiB,KALA;AAMnBT,EAAAA,OAAO,EAAER,SAAS,CAACiB,KANA;AAOnBR,EAAAA,QAAQ,EAAET,SAAS,CAACiB,KAPD;AAQnBP,EAAAA,WAAW,EAAEV,SAAS,CAACiB,KARJ;AASnBN,EAAAA,qBAAqB,EAAEX,SAAS,CAACkB;AATd,CAArB;AAYA,eAAepB,OAAO,CAACgB,eAAD,CAAP,CAAyBb,QAAzB,CAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport BarChartItem from './BarChartItem';\r\nimport { connect } from 'react-redux';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst BarChart = ({\r\n  DataHistory: {\r\n    Dates,\r\n    Cases,\r\n    Deaths,\r\n    Recovered,\r\n    WWDates,\r\n    WWCases,\r\n    WWDeaths,\r\n    WWRecovered,\r\n    currentCountryLoading\r\n  }\r\n}) => {\r\n  const [getDateHistory, setDataHistory] = useState(null);\r\n\r\n  useEffect(() => {\r\n    WWDates && !Dates\r\n      ? setDataHistory({\r\n          Dates: WWDates,\r\n          Cases: WWCases,\r\n          Deaths: WWDeaths,\r\n          Recovered: WWRecovered\r\n        })\r\n      : setDataHistory({\r\n          Dates,\r\n          Cases,\r\n          Deaths,\r\n          Recovered\r\n        });\r\n        // eslint-disable-next-line\r\n  }, [Dates, WWDates]);\r\n\r\n  return (\r\n    <>\r\n      {(!WWDates && !WWCases && !WWDeaths && !WWRecovered) ||\r\n      currentCountryLoading ? (\r\n        <div className='Spinner'>\r\n          <Spinner animation='border' role='status' variant='success'>\r\n            <span className='sr-only'>Loading...</span>\r\n          </Spinner>\r\n        </div>\r\n      ) : (\r\n        <BarChartItem\r\n          Dates={getDateHistory.Dates}\r\n          Cases={getDateHistory.Cases}\r\n          Deaths={getDateHistory.Deaths}\r\n          Recovered={getDateHistory.Recovered}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  DataHistory: state.DataHistory\r\n});\r\n\r\nBarChart.propTypes = {\r\n  Dates: PropTypes.array,\r\n  Cases: PropTypes.array,\r\n  Deaths: PropTypes.array,\r\n  Recovered: PropTypes.array,\r\n  WWDates: PropTypes.array,\r\n  WWCases: PropTypes.array,\r\n  WWDeaths: PropTypes.array,\r\n  WWRecovered: PropTypes.array,\r\n  currentCountryLoading: PropTypes.bool\r\n};\r\n\r\nexport default connect(mapStateToProps)(BarChart);\r\n"]},"metadata":{},"sourceType":"module"}