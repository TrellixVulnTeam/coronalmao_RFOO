{"ast":null,"code":"var _jsxFileName = \"/Users/lamhungpok/Projects/coding-projects/COVID19-Tracker/src/Components/TopSection/Countries.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { getAllCountries, WWStatsFetch } from '../../Actions/Countries';\nimport { setCurrentCountry } from '../../Actions/CurrentCountry';\nimport { getCurrentHistory, getWWHistory, clearCurrentHistory } from '../../Actions/DataHistory';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport AsyncSelect from 'react-select/async';\nimport CountriesItem from './CountriesItem';\nimport PropTypes from 'prop-types';\nimport Spinner from 'react-bootstrap/Spinner';\nimport Col from 'react-bootstrap/Col';\n\nconst Countries = ({\n  AllCountriesData: {\n    allCountriesData,\n    allCountriesloading\n  },\n  getAllCountries,\n  WWStatsFetch,\n  setCurrentCountry,\n  getCurrentHistory,\n  getWWHistory,\n  clearCurrentHistory\n}) => {\n  useEffect(() => {\n    getAllCountries();\n    WWStatsFetch();\n    getWWHistory();\n  }, [getAllCountries, WWStatsFetch, getWWHistory]);\n  const [, setInputValue] = useState('');\n\n  const filterCountrie = inputValue => {\n    if (!allCountriesloading && allCountriesData !== null) return allCountriesData.filter(c => c.country.toLowerCase().includes(inputValue.toLowerCase()));\n  };\n\n  const loadOptions = (InputValue, callback) => {\n    callback(filterCountrie(InputValue));\n  };\n\n  const handleInputChange = newValue => {\n    const inputValue = newValue.replace(/\\W/g, '');\n    setInputValue({\n      inputValue\n    });\n    return inputValue;\n  };\n\n  const onChange = e => {\n    if (e !== null) {\n      const {\n        updated,\n        country,\n        countryInfo: {\n          flag,\n          lat,\n          long\n        },\n        cases,\n        todayCases,\n        deaths,\n        todayDeaths,\n        recovered,\n        active,\n        critical,\n        tests\n      } = e; // Set Current country\n\n      setCurrentCountry({\n        updated,\n        country,\n        flag,\n        lat,\n        long,\n        cases,\n        todayCases,\n        deaths,\n        todayDeaths,\n        recovered,\n        active,\n        critical,\n        tests\n      });\n      getCurrentHistory(country);\n    } else {\n      setCurrentCountry(null);\n      clearCurrentHistory();\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    xs: \"12\",\n    sm: \"12\",\n    md: \"12\",\n    lg: \"12\",\n    xl: \"12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"countriesSection\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"countriesDopdown\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }\n  }, allCountriesloading || allCountriesData === null ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"Spinner\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Spinner, {\n    animation: \"border\",\n    role: \"status\",\n    variant: \"success\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"sr-only\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 21\n    }\n  }, \"Loading...\"))) : /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(AsyncSelect, {\n    placeholder: \"Search or Select Country ...\",\n    options: allCountriesData,\n    getOptionLabel: option => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"img\", {\n        src: option.countryInfo.flag,\n        className: \"flag\",\n        alt: option.country,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 27\n        }\n      }), `${option.country}`);\n    },\n    getOptionValue: option => option,\n    cacheOptions: true,\n    loadOptions: loadOptions,\n    defaultOptions: true,\n    onInputChange: handleInputChange,\n    onChange: onChange,\n    components: {\n      Option: CountriesItem\n    },\n    className: \"searchBox\",\n    autoFocus: true,\n    isClearable: true // menuIsOpen={true}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 19\n    }\n  })))))));\n};\n\nCountries.prototype = {\n  allCountriesData: PropTypes.object,\n  allCountriesloading: PropTypes.bool.isRequired,\n  getAllCountries: PropTypes.func.isRequired,\n  setCurrentCountry: PropTypes.func.isRequired,\n  WWStatsFetch: PropTypes.func.isRequired,\n  getCurrentHistory: PropTypes.func.isRequired,\n  getWWHistory: PropTypes.func.isRequired,\n  clearCurrentHistory: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => ({\n  AllCountriesData: state.AllCountries\n});\n\nexport default connect(mapStateToProps, {\n  getAllCountries,\n  WWStatsFetch,\n  setCurrentCountry,\n  getCurrentHistory,\n  getWWHistory,\n  clearCurrentHistory\n})(Countries);","map":{"version":3,"sources":["/Users/lamhungpok/Projects/coding-projects/COVID19-Tracker/src/Components/TopSection/Countries.jsx"],"names":["React","useState","useEffect","connect","getAllCountries","WWStatsFetch","setCurrentCountry","getCurrentHistory","getWWHistory","clearCurrentHistory","Container","Row","AsyncSelect","CountriesItem","PropTypes","Spinner","Col","Countries","AllCountriesData","allCountriesData","allCountriesloading","setInputValue","filterCountrie","inputValue","filter","c","country","toLowerCase","includes","loadOptions","InputValue","callback","handleInputChange","newValue","replace","onChange","e","updated","countryInfo","flag","lat","long","cases","todayCases","deaths","todayDeaths","recovered","active","critical","tests","option","Option","prototype","object","bool","isRequired","func","mapStateToProps","state","AllCountries"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { getAllCountries, WWStatsFetch } from '../../Actions/Countries';\r\nimport { setCurrentCountry } from '../../Actions/CurrentCountry';\r\nimport {\r\n  getCurrentHistory,\r\n  getWWHistory,\r\n  clearCurrentHistory\r\n} from '../../Actions/DataHistory';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport AsyncSelect from 'react-select/async';\r\nimport CountriesItem from './CountriesItem';\r\nimport PropTypes from 'prop-types';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\nimport Col from 'react-bootstrap/Col';\r\n\r\nconst Countries = ({\r\n  AllCountriesData: { allCountriesData, allCountriesloading },\r\n  getAllCountries,\r\n  WWStatsFetch,\r\n  setCurrentCountry,\r\n  getCurrentHistory,\r\n  getWWHistory,\r\n  clearCurrentHistory\r\n}) => {\r\n  useEffect(() => {\r\n    getAllCountries();\r\n    WWStatsFetch();\r\n    getWWHistory();\r\n  }, [getAllCountries, WWStatsFetch, getWWHistory]);\r\n\r\n  const [, setInputValue] = useState('');\r\n\r\n  const filterCountrie = inputValue => {\r\n    if (!allCountriesloading && allCountriesData !== null)\r\n      return allCountriesData.filter(c =>\r\n        c.country.toLowerCase().includes(inputValue.toLowerCase())\r\n      );\r\n  };\r\n\r\n  const loadOptions = (InputValue, callback) => {\r\n    callback(filterCountrie(InputValue));\r\n  };\r\n\r\n  const handleInputChange = newValue => {\r\n    const inputValue = newValue.replace(/\\W/g, '');\r\n    setInputValue({ inputValue });\r\n    return inputValue;\r\n  };\r\n\r\n  const onChange = e => {\r\n    if (e !== null) {\r\n      const {\r\n        updated,\r\n        country,\r\n        countryInfo: { flag, lat, long },\r\n        cases,\r\n        todayCases,\r\n        deaths,\r\n        todayDeaths,\r\n        recovered,\r\n        active,\r\n        critical,\r\n        tests\r\n      } = e;\r\n      // Set Current country\r\n      setCurrentCountry({\r\n        updated,\r\n        country,\r\n        flag,\r\n        lat,\r\n        long,\r\n        cases,\r\n        todayCases,\r\n        deaths,\r\n        todayDeaths,\r\n        recovered,\r\n        active,\r\n        critical,\r\n        tests\r\n      });\r\n\r\n      getCurrentHistory(country);\r\n    } else {\r\n      setCurrentCountry(null);\r\n      clearCurrentHistory();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <Row>\r\n        <Col xs='12' sm='12' md='12' lg='12' xl='12'>\r\n          <div className='countriesSection'>\r\n            <div className='countriesDopdown'>\r\n              {allCountriesloading || allCountriesData === null ? (\r\n                <div className='Spinner'>\r\n                  <Spinner animation='border' role='status' variant='success'>\r\n                    <span className='sr-only'>Loading...</span>\r\n                  </Spinner>\r\n                </div>\r\n              ) : (\r\n                <div>\r\n                  <AsyncSelect\r\n                    placeholder='Search or Select Country ...'\r\n                    options={allCountriesData}\r\n                    getOptionLabel={option => {\r\n                      return (\r\n                        <div>\r\n                          <img\r\n                            src={option.countryInfo.flag}\r\n                            className='flag'\r\n                            alt={option.country}\r\n                          />\r\n                          {`${option.country}`}\r\n                        </div>\r\n                      );\r\n                    }}\r\n                    getOptionValue={option => option}\r\n                    cacheOptions\r\n                    loadOptions={loadOptions}\r\n                    defaultOptions\r\n                    onInputChange={handleInputChange}\r\n                    onChange={onChange}\r\n                    components={{ Option: CountriesItem }}\r\n                    className='searchBox'\r\n                    autoFocus={true}\r\n                    isClearable={true}\r\n                    // menuIsOpen={true}\r\n                  />\r\n                </div>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n};\r\n\r\nCountries.prototype = {\r\n  allCountriesData: PropTypes.object,\r\n  allCountriesloading: PropTypes.bool.isRequired,\r\n  getAllCountries: PropTypes.func.isRequired,\r\n  setCurrentCountry: PropTypes.func.isRequired,\r\n  WWStatsFetch: PropTypes.func.isRequired,\r\n  getCurrentHistory: PropTypes.func.isRequired,\r\n  getWWHistory: PropTypes.func.isRequired,\r\n  clearCurrentHistory: PropTypes.func.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  AllCountriesData: state.AllCountries\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n  getAllCountries,\r\n  WWStatsFetch,\r\n  setCurrentCountry,\r\n  getCurrentHistory,\r\n  getWWHistory,\r\n  clearCurrentHistory\r\n})(Countries);\r\n"]},"metadata":{},"sourceType":"module"}