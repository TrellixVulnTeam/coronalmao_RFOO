{"ast":null,"code":"import { GET_ALL_COUNTRIES, GET_WWStats, SET_ALL_COUNTRIES_LOADING, ERROR } from \"./Types\";\nlet baseUrl;\nprocess.env.NODE_ENV ? baseUrl = process.env.REACT_APP_BASE_URL : baseUrl = process.env.BASE_URL;\nexport const getAllCountries = () => async dispatch => {\n  setLoading();\n\n  try {\n    const res = await fetch(`https://corona.lmao.ninja/v2/countries`);\n\n    if (!res.ok) {\n      dispatch({\n        type: ERROR,\n        payload: `HTTP Status: ${res.status}`\n      });\n      throw new Error(`HTTP Status: ${res.status}`);\n    }\n\n    const data = await res.json();\n    const dataFiltered = data.filter(data => data.country !== \"Western Sahara\");\n    const sortedCountriesByCases = [...dataFiltered].sort((a, b) => {\n      return b.cases - a.cases;\n    });\n    dispatch({\n      type: GET_ALL_COUNTRIES,\n      payload: {\n        allCountries: dataFiltered,\n        sortedCountriesByCases\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: ERROR,\n      payload: err.message\n    });\n  }\n};\nexport const WWStatsFetch = () => async dispatch => {\n  setLoading();\n\n  try {\n    const res = await fetch(`${baseUrl}v2/all`);\n    dispatch({\n      type: GET_WWStats,\n      payload: await res.json()\n    });\n  } catch (err) {\n    dispatch({\n      type: ERROR,\n      payload: err.message\n    });\n  }\n};\nexport const setLoading = () => {\n  return {\n    type: SET_ALL_COUNTRIES_LOADING\n  };\n};","map":{"version":3,"sources":["/Users/lamhungpok/Projects/coding-projects/COVID19-Tracker/src/Actions/Countries.js"],"names":["GET_ALL_COUNTRIES","GET_WWStats","SET_ALL_COUNTRIES_LOADING","ERROR","baseUrl","process","env","NODE_ENV","REACT_APP_BASE_URL","BASE_URL","getAllCountries","dispatch","setLoading","res","fetch","ok","type","payload","status","Error","data","json","dataFiltered","filter","country","sortedCountriesByCases","sort","a","b","cases","allCountries","err","message","WWStatsFetch"],"mappings":"AAAA,SACEA,iBADF,EAEEC,WAFF,EAGEC,yBAHF,EAIEC,KAJF,QAKO,SALP;AAOA,IAAIC,OAAJ;AACAC,OAAO,CAACC,GAAR,CAAYC,QAAZ,GACKH,OAAO,GAAGC,OAAO,CAACC,GAAR,CAAYE,kBAD3B,GAEKJ,OAAO,GAAGC,OAAO,CAACC,GAAR,CAAYG,QAF3B;AAIA,OAAO,MAAMC,eAAe,GAAG,MAAM,MAAOC,QAAP,IAAoB;AACvDC,EAAAA,UAAU;;AACV,MAAI;AACF,UAAMC,GAAG,GAAG,MAAMC,KAAK,CAAE,wCAAF,CAAvB;;AACA,QAAI,CAACD,GAAG,CAACE,EAAT,EAAa;AACXJ,MAAAA,QAAQ,CAAC;AACPK,QAAAA,IAAI,EAAEb,KADC;AAEPc,QAAAA,OAAO,EAAG,gBAAeJ,GAAG,CAACK,MAAO;AAF7B,OAAD,CAAR;AAIA,YAAM,IAAIC,KAAJ,CAAW,gBAAeN,GAAG,CAACK,MAAO,EAArC,CAAN;AACD;;AACD,UAAME,IAAI,GAAG,MAAMP,GAAG,CAACQ,IAAJ,EAAnB;AACA,UAAMC,YAAY,GAAGF,IAAI,CAACG,MAAL,CAClBH,IAAD,IAAUA,IAAI,CAACI,OAAL,KAAiB,gBADR,CAArB;AAGA,UAAMC,sBAAsB,GAAG,CAAC,GAAGH,YAAJ,EAAkBI,IAAlB,CAAuB,CAACC,CAAD,EAAIC,CAAJ,KAAU;AAC9D,aAAOA,CAAC,CAACC,KAAF,GAAUF,CAAC,CAACE,KAAnB;AACD,KAF8B,CAA/B;AAGAlB,IAAAA,QAAQ,CAAC;AACPK,MAAAA,IAAI,EAAEhB,iBADC;AAEPiB,MAAAA,OAAO,EAAE;AAAEa,QAAAA,YAAY,EAAER,YAAhB;AAA8BG,QAAAA;AAA9B;AAFF,KAAD,CAAR;AAID,GApBD,CAoBE,OAAOM,GAAP,EAAY;AACZpB,IAAAA,QAAQ,CAAC;AAAEK,MAAAA,IAAI,EAAEb,KAAR;AAAec,MAAAA,OAAO,EAAEc,GAAG,CAACC;AAA5B,KAAD,CAAR;AACD;AACF,CAzBM;AA2BP,OAAO,MAAMC,YAAY,GAAG,MAAM,MAAOtB,QAAP,IAAoB;AACpDC,EAAAA,UAAU;;AACV,MAAI;AACF,UAAMC,GAAG,GAAG,MAAMC,KAAK,CAAE,GAAEV,OAAQ,QAAZ,CAAvB;AACAO,IAAAA,QAAQ,CAAC;AAAEK,MAAAA,IAAI,EAAEf,WAAR;AAAqBgB,MAAAA,OAAO,EAAE,MAAMJ,GAAG,CAACQ,IAAJ;AAApC,KAAD,CAAR;AACD,GAHD,CAGE,OAAOU,GAAP,EAAY;AACZpB,IAAAA,QAAQ,CAAC;AAAEK,MAAAA,IAAI,EAAEb,KAAR;AAAec,MAAAA,OAAO,EAAEc,GAAG,CAACC;AAA5B,KAAD,CAAR;AACD;AACF,CARM;AAUP,OAAO,MAAMpB,UAAU,GAAG,MAAM;AAC9B,SAAO;AAAEI,IAAAA,IAAI,EAAEd;AAAR,GAAP;AACD,CAFM","sourcesContent":["import {\r\n  GET_ALL_COUNTRIES,\r\n  GET_WWStats,\r\n  SET_ALL_COUNTRIES_LOADING,\r\n  ERROR,\r\n} from \"./Types\";\r\n\r\nlet baseUrl;\r\nprocess.env.NODE_ENV\r\n  ? (baseUrl = process.env.REACT_APP_BASE_URL)\r\n  : (baseUrl = process.env.BASE_URL);\r\n\r\nexport const getAllCountries = () => async (dispatch) => {\r\n  setLoading();\r\n  try {\r\n    const res = await fetch(`https://corona.lmao.ninja/v2/countries`);\r\n    if (!res.ok) {\r\n      dispatch({\r\n        type: ERROR,\r\n        payload: `HTTP Status: ${res.status}`,\r\n      });\r\n      throw new Error(`HTTP Status: ${res.status}`);\r\n    }\r\n    const data = await res.json();\r\n    const dataFiltered = data.filter(\r\n      (data) => data.country !== \"Western Sahara\",\r\n    );\r\n    const sortedCountriesByCases = [...dataFiltered].sort((a, b) => {\r\n      return b.cases - a.cases;\r\n    });\r\n    dispatch({\r\n      type: GET_ALL_COUNTRIES,\r\n      payload: { allCountries: dataFiltered, sortedCountriesByCases },\r\n    });\r\n  } catch (err) {\r\n    dispatch({ type: ERROR, payload: err.message });\r\n  }\r\n};\r\n\r\nexport const WWStatsFetch = () => async (dispatch) => {\r\n  setLoading();\r\n  try {\r\n    const res = await fetch(`${baseUrl}v2/all`);\r\n    dispatch({ type: GET_WWStats, payload: await res.json() });\r\n  } catch (err) {\r\n    dispatch({ type: ERROR, payload: err.message });\r\n  }\r\n};\r\n\r\nexport const setLoading = () => {\r\n  return { type: SET_ALL_COUNTRIES_LOADING };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}